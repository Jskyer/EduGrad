// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v3.19.4
// source: paper/rpc/paper.proto

package paper

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	Paper_UploadPaperFormal_FullMethodName     = "/paper.Paper/uploadPaperFormal"
	Paper_ListPaperFormal_FullMethodName       = "/paper.Paper/listPaperFormal"
	Paper_CommentPaperFormal_FullMethodName    = "/paper.Paper/commentPaperFormal"
	Paper_UploadProposalDraft_FullMethodName   = "/paper.Paper/uploadProposalDraft"
	Paper_ListProposalDraft_FullMethodName     = "/paper.Paper/listProposalDraft"
	Paper_CommentProposalDraft_FullMethodName  = "/paper.Paper/commentProposalDraft"
	Paper_UploadProposalFormal_FullMethodName  = "/paper.Paper/uploadProposalFormal"
	Paper_ListProposalFormal_FullMethodName    = "/paper.Paper/listProposalFormal"
	Paper_CommentProposalFormal_FullMethodName = "/paper.Paper/commentProposalFormal"
	Paper_UploadPaperDraft_FullMethodName      = "/paper.Paper/uploadPaperDraft"
	Paper_ListPaperDraft_FullMethodName        = "/paper.Paper/listPaperDraft"
	Paper_CommentPaperDraft_FullMethodName     = "/paper.Paper/commentPaperDraft"
	Paper_UploadPaperFinal_FullMethodName      = "/paper.Paper/uploadPaperFinal"
	Paper_ListPaperFinal_FullMethodName        = "/paper.Paper/listPaperFinal"
	Paper_CommentPaperFinal_FullMethodName     = "/paper.Paper/commentPaperFinal"
	Paper_CheckPaperFinal_FullMethodName       = "/paper.Paper/checkPaperFinal"
)

// PaperClient is the client API for Paper service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type PaperClient interface {
	UploadPaperFormal(ctx context.Context, in *UploadFileReq, opts ...grpc.CallOption) (*UploadPaperFormalResp, error)
	// rpc downloadPaperFormal(DownloadFileReq) returns (DownloadPaperFormalResp);
	ListPaperFormal(ctx context.Context, in *ListPaperFormalReq, opts ...grpc.CallOption) (*ListPaperFormalResp, error)
	CommentPaperFormal(ctx context.Context, in *CommentPaperFormalReq, opts ...grpc.CallOption) (*CommentPaperFormalResp, error)
	UploadProposalDraft(ctx context.Context, in *UploadFileReq, opts ...grpc.CallOption) (*UploadProposalDraftResp, error)
	ListProposalDraft(ctx context.Context, in *ListProposalDraftReq, opts ...grpc.CallOption) (*ListProposalDraftResp, error)
	CommentProposalDraft(ctx context.Context, in *CommentProposalDraftReq, opts ...grpc.CallOption) (*CommentProposalDraftResp, error)
	UploadProposalFormal(ctx context.Context, in *UploadFileReq, opts ...grpc.CallOption) (*UploadProposalFormalResp, error)
	ListProposalFormal(ctx context.Context, in *ListProposalFormalReq, opts ...grpc.CallOption) (*ListProposalFormalResp, error)
	CommentProposalFormal(ctx context.Context, in *CommentProposalFormalReq, opts ...grpc.CallOption) (*CommentProposalFormalResp, error)
	UploadPaperDraft(ctx context.Context, in *UploadFileReq, opts ...grpc.CallOption) (*UploadPaperDraftResp, error)
	ListPaperDraft(ctx context.Context, in *ListPaperDraftReq, opts ...grpc.CallOption) (*ListPaperDraftResp, error)
	CommentPaperDraft(ctx context.Context, in *CommentPaperDraftReq, opts ...grpc.CallOption) (*CommentPaperDraftResp, error)
	UploadPaperFinal(ctx context.Context, in *UploadFileReq, opts ...grpc.CallOption) (*UploadPaperFinalResp, error)
	ListPaperFinal(ctx context.Context, in *ListPaperFinalReq, opts ...grpc.CallOption) (*ListPaperFinalResp, error)
	CommentPaperFinal(ctx context.Context, in *CommentPaperFinalReq, opts ...grpc.CallOption) (*CommentPaperFinalResp, error)
	CheckPaperFinal(ctx context.Context, in *CheckPaperFinalReq, opts ...grpc.CallOption) (*CheckPaperFinalResp, error)
}

type paperClient struct {
	cc grpc.ClientConnInterface
}

func NewPaperClient(cc grpc.ClientConnInterface) PaperClient {
	return &paperClient{cc}
}

func (c *paperClient) UploadPaperFormal(ctx context.Context, in *UploadFileReq, opts ...grpc.CallOption) (*UploadPaperFormalResp, error) {
	out := new(UploadPaperFormalResp)
	err := c.cc.Invoke(ctx, Paper_UploadPaperFormal_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *paperClient) ListPaperFormal(ctx context.Context, in *ListPaperFormalReq, opts ...grpc.CallOption) (*ListPaperFormalResp, error) {
	out := new(ListPaperFormalResp)
	err := c.cc.Invoke(ctx, Paper_ListPaperFormal_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *paperClient) CommentPaperFormal(ctx context.Context, in *CommentPaperFormalReq, opts ...grpc.CallOption) (*CommentPaperFormalResp, error) {
	out := new(CommentPaperFormalResp)
	err := c.cc.Invoke(ctx, Paper_CommentPaperFormal_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *paperClient) UploadProposalDraft(ctx context.Context, in *UploadFileReq, opts ...grpc.CallOption) (*UploadProposalDraftResp, error) {
	out := new(UploadProposalDraftResp)
	err := c.cc.Invoke(ctx, Paper_UploadProposalDraft_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *paperClient) ListProposalDraft(ctx context.Context, in *ListProposalDraftReq, opts ...grpc.CallOption) (*ListProposalDraftResp, error) {
	out := new(ListProposalDraftResp)
	err := c.cc.Invoke(ctx, Paper_ListProposalDraft_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *paperClient) CommentProposalDraft(ctx context.Context, in *CommentProposalDraftReq, opts ...grpc.CallOption) (*CommentProposalDraftResp, error) {
	out := new(CommentProposalDraftResp)
	err := c.cc.Invoke(ctx, Paper_CommentProposalDraft_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *paperClient) UploadProposalFormal(ctx context.Context, in *UploadFileReq, opts ...grpc.CallOption) (*UploadProposalFormalResp, error) {
	out := new(UploadProposalFormalResp)
	err := c.cc.Invoke(ctx, Paper_UploadProposalFormal_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *paperClient) ListProposalFormal(ctx context.Context, in *ListProposalFormalReq, opts ...grpc.CallOption) (*ListProposalFormalResp, error) {
	out := new(ListProposalFormalResp)
	err := c.cc.Invoke(ctx, Paper_ListProposalFormal_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *paperClient) CommentProposalFormal(ctx context.Context, in *CommentProposalFormalReq, opts ...grpc.CallOption) (*CommentProposalFormalResp, error) {
	out := new(CommentProposalFormalResp)
	err := c.cc.Invoke(ctx, Paper_CommentProposalFormal_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *paperClient) UploadPaperDraft(ctx context.Context, in *UploadFileReq, opts ...grpc.CallOption) (*UploadPaperDraftResp, error) {
	out := new(UploadPaperDraftResp)
	err := c.cc.Invoke(ctx, Paper_UploadPaperDraft_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *paperClient) ListPaperDraft(ctx context.Context, in *ListPaperDraftReq, opts ...grpc.CallOption) (*ListPaperDraftResp, error) {
	out := new(ListPaperDraftResp)
	err := c.cc.Invoke(ctx, Paper_ListPaperDraft_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *paperClient) CommentPaperDraft(ctx context.Context, in *CommentPaperDraftReq, opts ...grpc.CallOption) (*CommentPaperDraftResp, error) {
	out := new(CommentPaperDraftResp)
	err := c.cc.Invoke(ctx, Paper_CommentPaperDraft_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *paperClient) UploadPaperFinal(ctx context.Context, in *UploadFileReq, opts ...grpc.CallOption) (*UploadPaperFinalResp, error) {
	out := new(UploadPaperFinalResp)
	err := c.cc.Invoke(ctx, Paper_UploadPaperFinal_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *paperClient) ListPaperFinal(ctx context.Context, in *ListPaperFinalReq, opts ...grpc.CallOption) (*ListPaperFinalResp, error) {
	out := new(ListPaperFinalResp)
	err := c.cc.Invoke(ctx, Paper_ListPaperFinal_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *paperClient) CommentPaperFinal(ctx context.Context, in *CommentPaperFinalReq, opts ...grpc.CallOption) (*CommentPaperFinalResp, error) {
	out := new(CommentPaperFinalResp)
	err := c.cc.Invoke(ctx, Paper_CommentPaperFinal_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *paperClient) CheckPaperFinal(ctx context.Context, in *CheckPaperFinalReq, opts ...grpc.CallOption) (*CheckPaperFinalResp, error) {
	out := new(CheckPaperFinalResp)
	err := c.cc.Invoke(ctx, Paper_CheckPaperFinal_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// PaperServer is the server API for Paper service.
// All implementations must embed UnimplementedPaperServer
// for forward compatibility
type PaperServer interface {
	UploadPaperFormal(context.Context, *UploadFileReq) (*UploadPaperFormalResp, error)
	// rpc downloadPaperFormal(DownloadFileReq) returns (DownloadPaperFormalResp);
	ListPaperFormal(context.Context, *ListPaperFormalReq) (*ListPaperFormalResp, error)
	CommentPaperFormal(context.Context, *CommentPaperFormalReq) (*CommentPaperFormalResp, error)
	UploadProposalDraft(context.Context, *UploadFileReq) (*UploadProposalDraftResp, error)
	ListProposalDraft(context.Context, *ListProposalDraftReq) (*ListProposalDraftResp, error)
	CommentProposalDraft(context.Context, *CommentProposalDraftReq) (*CommentProposalDraftResp, error)
	UploadProposalFormal(context.Context, *UploadFileReq) (*UploadProposalFormalResp, error)
	ListProposalFormal(context.Context, *ListProposalFormalReq) (*ListProposalFormalResp, error)
	CommentProposalFormal(context.Context, *CommentProposalFormalReq) (*CommentProposalFormalResp, error)
	UploadPaperDraft(context.Context, *UploadFileReq) (*UploadPaperDraftResp, error)
	ListPaperDraft(context.Context, *ListPaperDraftReq) (*ListPaperDraftResp, error)
	CommentPaperDraft(context.Context, *CommentPaperDraftReq) (*CommentPaperDraftResp, error)
	UploadPaperFinal(context.Context, *UploadFileReq) (*UploadPaperFinalResp, error)
	ListPaperFinal(context.Context, *ListPaperFinalReq) (*ListPaperFinalResp, error)
	CommentPaperFinal(context.Context, *CommentPaperFinalReq) (*CommentPaperFinalResp, error)
	CheckPaperFinal(context.Context, *CheckPaperFinalReq) (*CheckPaperFinalResp, error)
	mustEmbedUnimplementedPaperServer()
}

// UnimplementedPaperServer must be embedded to have forward compatible implementations.
type UnimplementedPaperServer struct {
}

func (UnimplementedPaperServer) UploadPaperFormal(context.Context, *UploadFileReq) (*UploadPaperFormalResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UploadPaperFormal not implemented")
}
func (UnimplementedPaperServer) ListPaperFormal(context.Context, *ListPaperFormalReq) (*ListPaperFormalResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListPaperFormal not implemented")
}
func (UnimplementedPaperServer) CommentPaperFormal(context.Context, *CommentPaperFormalReq) (*CommentPaperFormalResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CommentPaperFormal not implemented")
}
func (UnimplementedPaperServer) UploadProposalDraft(context.Context, *UploadFileReq) (*UploadProposalDraftResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UploadProposalDraft not implemented")
}
func (UnimplementedPaperServer) ListProposalDraft(context.Context, *ListProposalDraftReq) (*ListProposalDraftResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListProposalDraft not implemented")
}
func (UnimplementedPaperServer) CommentProposalDraft(context.Context, *CommentProposalDraftReq) (*CommentProposalDraftResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CommentProposalDraft not implemented")
}
func (UnimplementedPaperServer) UploadProposalFormal(context.Context, *UploadFileReq) (*UploadProposalFormalResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UploadProposalFormal not implemented")
}
func (UnimplementedPaperServer) ListProposalFormal(context.Context, *ListProposalFormalReq) (*ListProposalFormalResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListProposalFormal not implemented")
}
func (UnimplementedPaperServer) CommentProposalFormal(context.Context, *CommentProposalFormalReq) (*CommentProposalFormalResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CommentProposalFormal not implemented")
}
func (UnimplementedPaperServer) UploadPaperDraft(context.Context, *UploadFileReq) (*UploadPaperDraftResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UploadPaperDraft not implemented")
}
func (UnimplementedPaperServer) ListPaperDraft(context.Context, *ListPaperDraftReq) (*ListPaperDraftResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListPaperDraft not implemented")
}
func (UnimplementedPaperServer) CommentPaperDraft(context.Context, *CommentPaperDraftReq) (*CommentPaperDraftResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CommentPaperDraft not implemented")
}
func (UnimplementedPaperServer) UploadPaperFinal(context.Context, *UploadFileReq) (*UploadPaperFinalResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UploadPaperFinal not implemented")
}
func (UnimplementedPaperServer) ListPaperFinal(context.Context, *ListPaperFinalReq) (*ListPaperFinalResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListPaperFinal not implemented")
}
func (UnimplementedPaperServer) CommentPaperFinal(context.Context, *CommentPaperFinalReq) (*CommentPaperFinalResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CommentPaperFinal not implemented")
}
func (UnimplementedPaperServer) CheckPaperFinal(context.Context, *CheckPaperFinalReq) (*CheckPaperFinalResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CheckPaperFinal not implemented")
}
func (UnimplementedPaperServer) mustEmbedUnimplementedPaperServer() {}

// UnsafePaperServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to PaperServer will
// result in compilation errors.
type UnsafePaperServer interface {
	mustEmbedUnimplementedPaperServer()
}

func RegisterPaperServer(s grpc.ServiceRegistrar, srv PaperServer) {
	s.RegisterService(&Paper_ServiceDesc, srv)
}

func _Paper_UploadPaperFormal_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UploadFileReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PaperServer).UploadPaperFormal(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Paper_UploadPaperFormal_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PaperServer).UploadPaperFormal(ctx, req.(*UploadFileReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Paper_ListPaperFormal_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListPaperFormalReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PaperServer).ListPaperFormal(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Paper_ListPaperFormal_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PaperServer).ListPaperFormal(ctx, req.(*ListPaperFormalReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Paper_CommentPaperFormal_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CommentPaperFormalReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PaperServer).CommentPaperFormal(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Paper_CommentPaperFormal_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PaperServer).CommentPaperFormal(ctx, req.(*CommentPaperFormalReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Paper_UploadProposalDraft_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UploadFileReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PaperServer).UploadProposalDraft(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Paper_UploadProposalDraft_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PaperServer).UploadProposalDraft(ctx, req.(*UploadFileReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Paper_ListProposalDraft_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListProposalDraftReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PaperServer).ListProposalDraft(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Paper_ListProposalDraft_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PaperServer).ListProposalDraft(ctx, req.(*ListProposalDraftReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Paper_CommentProposalDraft_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CommentProposalDraftReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PaperServer).CommentProposalDraft(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Paper_CommentProposalDraft_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PaperServer).CommentProposalDraft(ctx, req.(*CommentProposalDraftReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Paper_UploadProposalFormal_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UploadFileReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PaperServer).UploadProposalFormal(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Paper_UploadProposalFormal_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PaperServer).UploadProposalFormal(ctx, req.(*UploadFileReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Paper_ListProposalFormal_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListProposalFormalReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PaperServer).ListProposalFormal(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Paper_ListProposalFormal_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PaperServer).ListProposalFormal(ctx, req.(*ListProposalFormalReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Paper_CommentProposalFormal_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CommentProposalFormalReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PaperServer).CommentProposalFormal(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Paper_CommentProposalFormal_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PaperServer).CommentProposalFormal(ctx, req.(*CommentProposalFormalReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Paper_UploadPaperDraft_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UploadFileReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PaperServer).UploadPaperDraft(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Paper_UploadPaperDraft_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PaperServer).UploadPaperDraft(ctx, req.(*UploadFileReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Paper_ListPaperDraft_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListPaperDraftReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PaperServer).ListPaperDraft(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Paper_ListPaperDraft_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PaperServer).ListPaperDraft(ctx, req.(*ListPaperDraftReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Paper_CommentPaperDraft_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CommentPaperDraftReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PaperServer).CommentPaperDraft(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Paper_CommentPaperDraft_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PaperServer).CommentPaperDraft(ctx, req.(*CommentPaperDraftReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Paper_UploadPaperFinal_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UploadFileReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PaperServer).UploadPaperFinal(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Paper_UploadPaperFinal_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PaperServer).UploadPaperFinal(ctx, req.(*UploadFileReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Paper_ListPaperFinal_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListPaperFinalReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PaperServer).ListPaperFinal(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Paper_ListPaperFinal_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PaperServer).ListPaperFinal(ctx, req.(*ListPaperFinalReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Paper_CommentPaperFinal_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CommentPaperFinalReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PaperServer).CommentPaperFinal(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Paper_CommentPaperFinal_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PaperServer).CommentPaperFinal(ctx, req.(*CommentPaperFinalReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Paper_CheckPaperFinal_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CheckPaperFinalReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PaperServer).CheckPaperFinal(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Paper_CheckPaperFinal_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PaperServer).CheckPaperFinal(ctx, req.(*CheckPaperFinalReq))
	}
	return interceptor(ctx, in, info, handler)
}

// Paper_ServiceDesc is the grpc.ServiceDesc for Paper service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Paper_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "paper.Paper",
	HandlerType: (*PaperServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "uploadPaperFormal",
			Handler:    _Paper_UploadPaperFormal_Handler,
		},
		{
			MethodName: "listPaperFormal",
			Handler:    _Paper_ListPaperFormal_Handler,
		},
		{
			MethodName: "commentPaperFormal",
			Handler:    _Paper_CommentPaperFormal_Handler,
		},
		{
			MethodName: "uploadProposalDraft",
			Handler:    _Paper_UploadProposalDraft_Handler,
		},
		{
			MethodName: "listProposalDraft",
			Handler:    _Paper_ListProposalDraft_Handler,
		},
		{
			MethodName: "commentProposalDraft",
			Handler:    _Paper_CommentProposalDraft_Handler,
		},
		{
			MethodName: "uploadProposalFormal",
			Handler:    _Paper_UploadProposalFormal_Handler,
		},
		{
			MethodName: "listProposalFormal",
			Handler:    _Paper_ListProposalFormal_Handler,
		},
		{
			MethodName: "commentProposalFormal",
			Handler:    _Paper_CommentProposalFormal_Handler,
		},
		{
			MethodName: "uploadPaperDraft",
			Handler:    _Paper_UploadPaperDraft_Handler,
		},
		{
			MethodName: "listPaperDraft",
			Handler:    _Paper_ListPaperDraft_Handler,
		},
		{
			MethodName: "commentPaperDraft",
			Handler:    _Paper_CommentPaperDraft_Handler,
		},
		{
			MethodName: "uploadPaperFinal",
			Handler:    _Paper_UploadPaperFinal_Handler,
		},
		{
			MethodName: "listPaperFinal",
			Handler:    _Paper_ListPaperFinal_Handler,
		},
		{
			MethodName: "commentPaperFinal",
			Handler:    _Paper_CommentPaperFinal_Handler,
		},
		{
			MethodName: "checkPaperFinal",
			Handler:    _Paper_CheckPaperFinal_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "paper/rpc/paper.proto",
}
