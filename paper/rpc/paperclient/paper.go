// Code generated by goctl. DO NOT EDIT.
// Source: paper.proto

package paperclient

import (
	"context"

	"edu-grad/paper/rpc/types/proto/paper"

	"github.com/zeromicro/go-zero/zrpc"
	"google.golang.org/grpc"
)

type (
	CheckPaperFinalReq        = paper.CheckPaperFinalReq
	CheckPaperFinalResp       = paper.CheckPaperFinalResp
	CommentPaperDraftReq      = paper.CommentPaperDraftReq
	CommentPaperDraftResp     = paper.CommentPaperDraftResp
	CommentPaperFinalReq      = paper.CommentPaperFinalReq
	CommentPaperFinalResp     = paper.CommentPaperFinalResp
	CommentPaperFormalReq     = paper.CommentPaperFormalReq
	CommentPaperFormalResp    = paper.CommentPaperFormalResp
	CommentProposalDraftReq   = paper.CommentProposalDraftReq
	CommentProposalDraftResp  = paper.CommentProposalDraftResp
	CommentProposalFormalReq  = paper.CommentProposalFormalReq
	CommentProposalFormalResp = paper.CommentProposalFormalResp
	ListPaperDraftReq         = paper.ListPaperDraftReq
	ListPaperDraftResp        = paper.ListPaperDraftResp
	ListPaperFinalReq         = paper.ListPaperFinalReq
	ListPaperFinalResp        = paper.ListPaperFinalResp
	ListPaperFormalReq        = paper.ListPaperFormalReq
	ListPaperFormalResp       = paper.ListPaperFormalResp
	ListProposalDraftReq      = paper.ListProposalDraftReq
	ListProposalDraftResp     = paper.ListProposalDraftResp
	ListProposalFormalReq     = paper.ListProposalFormalReq
	ListProposalFormalResp    = paper.ListProposalFormalResp
	PaperDraft                = paper.PaperDraft
	PaperFinal                = paper.PaperFinal
	PaperFormal               = paper.PaperFormal
	ProposalDraft             = paper.ProposalDraft
	ProposalFormal            = paper.ProposalFormal
	UploadFileReq             = paper.UploadFileReq
	UploadPaperDraftResp      = paper.UploadPaperDraftResp
	UploadPaperFinalResp      = paper.UploadPaperFinalResp
	UploadPaperFormalResp     = paper.UploadPaperFormalResp
	UploadProposalDraftResp   = paper.UploadProposalDraftResp
	UploadProposalFormalResp  = paper.UploadProposalFormalResp

	Paper interface {
		UploadPaperFormal(ctx context.Context, in *UploadFileReq, opts ...grpc.CallOption) (*UploadPaperFormalResp, error)
		// rpc downloadPaperFormal(DownloadFileReq) returns (DownloadPaperFormalResp);
		ListPaperFormal(ctx context.Context, in *ListPaperFormalReq, opts ...grpc.CallOption) (*ListPaperFormalResp, error)
		CommentPaperFormal(ctx context.Context, in *CommentPaperFormalReq, opts ...grpc.CallOption) (*CommentPaperFormalResp, error)
		UploadProposalDraft(ctx context.Context, in *UploadFileReq, opts ...grpc.CallOption) (*UploadProposalDraftResp, error)
		ListProposalDraft(ctx context.Context, in *ListProposalDraftReq, opts ...grpc.CallOption) (*ListProposalDraftResp, error)
		CommentProposalDraft(ctx context.Context, in *CommentProposalDraftReq, opts ...grpc.CallOption) (*CommentProposalDraftResp, error)
		UploadProposalFormal(ctx context.Context, in *UploadFileReq, opts ...grpc.CallOption) (*UploadProposalFormalResp, error)
		ListProposalFormal(ctx context.Context, in *ListProposalFormalReq, opts ...grpc.CallOption) (*ListProposalFormalResp, error)
		CommentProposalFormal(ctx context.Context, in *CommentProposalFormalReq, opts ...grpc.CallOption) (*CommentProposalFormalResp, error)
		UploadPaperDraft(ctx context.Context, in *UploadFileReq, opts ...grpc.CallOption) (*UploadPaperDraftResp, error)
		ListPaperDraft(ctx context.Context, in *ListPaperDraftReq, opts ...grpc.CallOption) (*ListPaperDraftResp, error)
		CommentPaperDraft(ctx context.Context, in *CommentPaperDraftReq, opts ...grpc.CallOption) (*CommentPaperDraftResp, error)
		UploadPaperFinal(ctx context.Context, in *UploadFileReq, opts ...grpc.CallOption) (*UploadPaperFinalResp, error)
		ListPaperFinal(ctx context.Context, in *ListPaperFinalReq, opts ...grpc.CallOption) (*ListPaperFinalResp, error)
		CommentPaperFinal(ctx context.Context, in *CommentPaperFinalReq, opts ...grpc.CallOption) (*CommentPaperFinalResp, error)
		CheckPaperFinal(ctx context.Context, in *CheckPaperFinalReq, opts ...grpc.CallOption) (*CheckPaperFinalResp, error)
	}

	defaultPaper struct {
		cli zrpc.Client
	}
)

func NewPaper(cli zrpc.Client) Paper {
	return &defaultPaper{
		cli: cli,
	}
}

func (m *defaultPaper) UploadPaperFormal(ctx context.Context, in *UploadFileReq, opts ...grpc.CallOption) (*UploadPaperFormalResp, error) {
	client := paper.NewPaperClient(m.cli.Conn())
	return client.UploadPaperFormal(ctx, in, opts...)
}

// rpc downloadPaperFormal(DownloadFileReq) returns (DownloadPaperFormalResp);
func (m *defaultPaper) ListPaperFormal(ctx context.Context, in *ListPaperFormalReq, opts ...grpc.CallOption) (*ListPaperFormalResp, error) {
	client := paper.NewPaperClient(m.cli.Conn())
	return client.ListPaperFormal(ctx, in, opts...)
}

func (m *defaultPaper) CommentPaperFormal(ctx context.Context, in *CommentPaperFormalReq, opts ...grpc.CallOption) (*CommentPaperFormalResp, error) {
	client := paper.NewPaperClient(m.cli.Conn())
	return client.CommentPaperFormal(ctx, in, opts...)
}

func (m *defaultPaper) UploadProposalDraft(ctx context.Context, in *UploadFileReq, opts ...grpc.CallOption) (*UploadProposalDraftResp, error) {
	client := paper.NewPaperClient(m.cli.Conn())
	return client.UploadProposalDraft(ctx, in, opts...)
}

func (m *defaultPaper) ListProposalDraft(ctx context.Context, in *ListProposalDraftReq, opts ...grpc.CallOption) (*ListProposalDraftResp, error) {
	client := paper.NewPaperClient(m.cli.Conn())
	return client.ListProposalDraft(ctx, in, opts...)
}

func (m *defaultPaper) CommentProposalDraft(ctx context.Context, in *CommentProposalDraftReq, opts ...grpc.CallOption) (*CommentProposalDraftResp, error) {
	client := paper.NewPaperClient(m.cli.Conn())
	return client.CommentProposalDraft(ctx, in, opts...)
}

func (m *defaultPaper) UploadProposalFormal(ctx context.Context, in *UploadFileReq, opts ...grpc.CallOption) (*UploadProposalFormalResp, error) {
	client := paper.NewPaperClient(m.cli.Conn())
	return client.UploadProposalFormal(ctx, in, opts...)
}

func (m *defaultPaper) ListProposalFormal(ctx context.Context, in *ListProposalFormalReq, opts ...grpc.CallOption) (*ListProposalFormalResp, error) {
	client := paper.NewPaperClient(m.cli.Conn())
	return client.ListProposalFormal(ctx, in, opts...)
}

func (m *defaultPaper) CommentProposalFormal(ctx context.Context, in *CommentProposalFormalReq, opts ...grpc.CallOption) (*CommentProposalFormalResp, error) {
	client := paper.NewPaperClient(m.cli.Conn())
	return client.CommentProposalFormal(ctx, in, opts...)
}

func (m *defaultPaper) UploadPaperDraft(ctx context.Context, in *UploadFileReq, opts ...grpc.CallOption) (*UploadPaperDraftResp, error) {
	client := paper.NewPaperClient(m.cli.Conn())
	return client.UploadPaperDraft(ctx, in, opts...)
}

func (m *defaultPaper) ListPaperDraft(ctx context.Context, in *ListPaperDraftReq, opts ...grpc.CallOption) (*ListPaperDraftResp, error) {
	client := paper.NewPaperClient(m.cli.Conn())
	return client.ListPaperDraft(ctx, in, opts...)
}

func (m *defaultPaper) CommentPaperDraft(ctx context.Context, in *CommentPaperDraftReq, opts ...grpc.CallOption) (*CommentPaperDraftResp, error) {
	client := paper.NewPaperClient(m.cli.Conn())
	return client.CommentPaperDraft(ctx, in, opts...)
}

func (m *defaultPaper) UploadPaperFinal(ctx context.Context, in *UploadFileReq, opts ...grpc.CallOption) (*UploadPaperFinalResp, error) {
	client := paper.NewPaperClient(m.cli.Conn())
	return client.UploadPaperFinal(ctx, in, opts...)
}

func (m *defaultPaper) ListPaperFinal(ctx context.Context, in *ListPaperFinalReq, opts ...grpc.CallOption) (*ListPaperFinalResp, error) {
	client := paper.NewPaperClient(m.cli.Conn())
	return client.ListPaperFinal(ctx, in, opts...)
}

func (m *defaultPaper) CommentPaperFinal(ctx context.Context, in *CommentPaperFinalReq, opts ...grpc.CallOption) (*CommentPaperFinalResp, error) {
	client := paper.NewPaperClient(m.cli.Conn())
	return client.CommentPaperFinal(ctx, in, opts...)
}

func (m *defaultPaper) CheckPaperFinal(ctx context.Context, in *CheckPaperFinalReq, opts ...grpc.CallOption) (*CheckPaperFinalResp, error) {
	client := paper.NewPaperClient(m.cli.Conn())
	return client.CheckPaperFinal(ctx, in, opts...)
}
