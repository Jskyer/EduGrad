// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v3.19.4
// source: user/rpc/user.proto

package user

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	User_Login_FullMethodName              = "/user.User/login"
	User_Register_FullMethodName           = "/user.User/register"
	User_GetUserInfo_FullMethodName        = "/user.User/getUserInfo"
	User_UpdateUserInfo_FullMethodName     = "/user.User/updateUserInfo"
	User_GenerateToken_FullMethodName      = "/user.User/generateToken"
	User_GetUserPage_FullMethodName        = "/user.User/getUserPage"
	User_GetUserCondPage_FullMethodName    = "/user.User/getUserCondPage"
	User_AddInstruct_FullMethodName        = "/user.User/addInstruct"
	User_UpdateInstruct_FullMethodName     = "/user.User/updateInstruct"
	User_GetInstructByStuId_FullMethodName = "/user.User/getInstructByStuId"
	User_GetListByTeacherId_FullMethodName = "/user.User/getListByTeacherId"
	User_UpdateTitle_FullMethodName        = "/user.User/updateTitle"
	User_UpdateState_FullMethodName        = "/user.User/updateState"
	User_AddPhase_FullMethodName           = "/user.User/addPhase"
	User_UpdateProcess_FullMethodName      = "/user.User/updateProcess"
	User_ListTermSort_FullMethodName       = "/user.User/listTermSort"
	User_AddPhaseRelation_FullMethodName   = "/user.User/addPhaseRelation"
	User_EndPhaseRelation_FullMethodName   = "/user.User/endPhaseRelation"
	User_ListPhaseRelation_FullMethodName  = "/user.User/listPhaseRelation"
)

// UserClient is the client API for User service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type UserClient interface {
	Login(ctx context.Context, in *LoginReq, opts ...grpc.CallOption) (*LoginResp, error)
	Register(ctx context.Context, in *RegisterReq, opts ...grpc.CallOption) (*RegisterResp, error)
	GetUserInfo(ctx context.Context, in *GetUserInfoReq, opts ...grpc.CallOption) (*GetUserInfoResp, error)
	UpdateUserInfo(ctx context.Context, in *UpdateUserInfoReq, opts ...grpc.CallOption) (*UpdateUserInfoResp, error)
	GenerateToken(ctx context.Context, in *GenerateTokenReq, opts ...grpc.CallOption) (*GenerateTokenResp, error)
	GetUserPage(ctx context.Context, in *GetUserPageReq, opts ...grpc.CallOption) (*GetUserPageResp, error)
	GetUserCondPage(ctx context.Context, in *GetUserCondPageReq, opts ...grpc.CallOption) (*GetUserCondPageResp, error)
	AddInstruct(ctx context.Context, in *AddInstructReq, opts ...grpc.CallOption) (*AddInstructResp, error)
	UpdateInstruct(ctx context.Context, in *UpdateInstructReq, opts ...grpc.CallOption) (*UpdateInstructResp, error)
	GetInstructByStuId(ctx context.Context, in *GetInstructByStuIdReq, opts ...grpc.CallOption) (*GetInstructByStuIdResp, error)
	GetListByTeacherId(ctx context.Context, in *GetListByTeacherIdReq, opts ...grpc.CallOption) (*GetListByTeacherIdResp, error)
	UpdateTitle(ctx context.Context, in *UpdateTitleReq, opts ...grpc.CallOption) (*UpdateTitleResp, error)
	UpdateState(ctx context.Context, in *UpdateStateReq, opts ...grpc.CallOption) (*UpdateStateResp, error)
	AddPhase(ctx context.Context, in *AddPhaseReq, opts ...grpc.CallOption) (*AddPhaseResp, error)
	UpdateProcess(ctx context.Context, in *UpdateProcessReq, opts ...grpc.CallOption) (*UpdateProcessResp, error)
	ListTermSort(ctx context.Context, in *ListTermSortReq, opts ...grpc.CallOption) (*ListTermSortResp, error)
	AddPhaseRelation(ctx context.Context, in *AddPhaseRelationReq, opts ...grpc.CallOption) (*AddPhaseRelationResp, error)
	EndPhaseRelation(ctx context.Context, in *EndPhaseRelationReq, opts ...grpc.CallOption) (*EndPhaseRelationResp, error)
	ListPhaseRelation(ctx context.Context, in *ListPhaseRelationReq, opts ...grpc.CallOption) (*ListPhaseRelationResp, error)
}

type userClient struct {
	cc grpc.ClientConnInterface
}

func NewUserClient(cc grpc.ClientConnInterface) UserClient {
	return &userClient{cc}
}

func (c *userClient) Login(ctx context.Context, in *LoginReq, opts ...grpc.CallOption) (*LoginResp, error) {
	out := new(LoginResp)
	err := c.cc.Invoke(ctx, User_Login_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userClient) Register(ctx context.Context, in *RegisterReq, opts ...grpc.CallOption) (*RegisterResp, error) {
	out := new(RegisterResp)
	err := c.cc.Invoke(ctx, User_Register_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userClient) GetUserInfo(ctx context.Context, in *GetUserInfoReq, opts ...grpc.CallOption) (*GetUserInfoResp, error) {
	out := new(GetUserInfoResp)
	err := c.cc.Invoke(ctx, User_GetUserInfo_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userClient) UpdateUserInfo(ctx context.Context, in *UpdateUserInfoReq, opts ...grpc.CallOption) (*UpdateUserInfoResp, error) {
	out := new(UpdateUserInfoResp)
	err := c.cc.Invoke(ctx, User_UpdateUserInfo_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userClient) GenerateToken(ctx context.Context, in *GenerateTokenReq, opts ...grpc.CallOption) (*GenerateTokenResp, error) {
	out := new(GenerateTokenResp)
	err := c.cc.Invoke(ctx, User_GenerateToken_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userClient) GetUserPage(ctx context.Context, in *GetUserPageReq, opts ...grpc.CallOption) (*GetUserPageResp, error) {
	out := new(GetUserPageResp)
	err := c.cc.Invoke(ctx, User_GetUserPage_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userClient) GetUserCondPage(ctx context.Context, in *GetUserCondPageReq, opts ...grpc.CallOption) (*GetUserCondPageResp, error) {
	out := new(GetUserCondPageResp)
	err := c.cc.Invoke(ctx, User_GetUserCondPage_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userClient) AddInstruct(ctx context.Context, in *AddInstructReq, opts ...grpc.CallOption) (*AddInstructResp, error) {
	out := new(AddInstructResp)
	err := c.cc.Invoke(ctx, User_AddInstruct_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userClient) UpdateInstruct(ctx context.Context, in *UpdateInstructReq, opts ...grpc.CallOption) (*UpdateInstructResp, error) {
	out := new(UpdateInstructResp)
	err := c.cc.Invoke(ctx, User_UpdateInstruct_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userClient) GetInstructByStuId(ctx context.Context, in *GetInstructByStuIdReq, opts ...grpc.CallOption) (*GetInstructByStuIdResp, error) {
	out := new(GetInstructByStuIdResp)
	err := c.cc.Invoke(ctx, User_GetInstructByStuId_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userClient) GetListByTeacherId(ctx context.Context, in *GetListByTeacherIdReq, opts ...grpc.CallOption) (*GetListByTeacherIdResp, error) {
	out := new(GetListByTeacherIdResp)
	err := c.cc.Invoke(ctx, User_GetListByTeacherId_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userClient) UpdateTitle(ctx context.Context, in *UpdateTitleReq, opts ...grpc.CallOption) (*UpdateTitleResp, error) {
	out := new(UpdateTitleResp)
	err := c.cc.Invoke(ctx, User_UpdateTitle_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userClient) UpdateState(ctx context.Context, in *UpdateStateReq, opts ...grpc.CallOption) (*UpdateStateResp, error) {
	out := new(UpdateStateResp)
	err := c.cc.Invoke(ctx, User_UpdateState_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userClient) AddPhase(ctx context.Context, in *AddPhaseReq, opts ...grpc.CallOption) (*AddPhaseResp, error) {
	out := new(AddPhaseResp)
	err := c.cc.Invoke(ctx, User_AddPhase_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userClient) UpdateProcess(ctx context.Context, in *UpdateProcessReq, opts ...grpc.CallOption) (*UpdateProcessResp, error) {
	out := new(UpdateProcessResp)
	err := c.cc.Invoke(ctx, User_UpdateProcess_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userClient) ListTermSort(ctx context.Context, in *ListTermSortReq, opts ...grpc.CallOption) (*ListTermSortResp, error) {
	out := new(ListTermSortResp)
	err := c.cc.Invoke(ctx, User_ListTermSort_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userClient) AddPhaseRelation(ctx context.Context, in *AddPhaseRelationReq, opts ...grpc.CallOption) (*AddPhaseRelationResp, error) {
	out := new(AddPhaseRelationResp)
	err := c.cc.Invoke(ctx, User_AddPhaseRelation_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userClient) EndPhaseRelation(ctx context.Context, in *EndPhaseRelationReq, opts ...grpc.CallOption) (*EndPhaseRelationResp, error) {
	out := new(EndPhaseRelationResp)
	err := c.cc.Invoke(ctx, User_EndPhaseRelation_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userClient) ListPhaseRelation(ctx context.Context, in *ListPhaseRelationReq, opts ...grpc.CallOption) (*ListPhaseRelationResp, error) {
	out := new(ListPhaseRelationResp)
	err := c.cc.Invoke(ctx, User_ListPhaseRelation_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// UserServer is the server API for User service.
// All implementations must embed UnimplementedUserServer
// for forward compatibility
type UserServer interface {
	Login(context.Context, *LoginReq) (*LoginResp, error)
	Register(context.Context, *RegisterReq) (*RegisterResp, error)
	GetUserInfo(context.Context, *GetUserInfoReq) (*GetUserInfoResp, error)
	UpdateUserInfo(context.Context, *UpdateUserInfoReq) (*UpdateUserInfoResp, error)
	GenerateToken(context.Context, *GenerateTokenReq) (*GenerateTokenResp, error)
	GetUserPage(context.Context, *GetUserPageReq) (*GetUserPageResp, error)
	GetUserCondPage(context.Context, *GetUserCondPageReq) (*GetUserCondPageResp, error)
	AddInstruct(context.Context, *AddInstructReq) (*AddInstructResp, error)
	UpdateInstruct(context.Context, *UpdateInstructReq) (*UpdateInstructResp, error)
	GetInstructByStuId(context.Context, *GetInstructByStuIdReq) (*GetInstructByStuIdResp, error)
	GetListByTeacherId(context.Context, *GetListByTeacherIdReq) (*GetListByTeacherIdResp, error)
	UpdateTitle(context.Context, *UpdateTitleReq) (*UpdateTitleResp, error)
	UpdateState(context.Context, *UpdateStateReq) (*UpdateStateResp, error)
	AddPhase(context.Context, *AddPhaseReq) (*AddPhaseResp, error)
	UpdateProcess(context.Context, *UpdateProcessReq) (*UpdateProcessResp, error)
	ListTermSort(context.Context, *ListTermSortReq) (*ListTermSortResp, error)
	AddPhaseRelation(context.Context, *AddPhaseRelationReq) (*AddPhaseRelationResp, error)
	EndPhaseRelation(context.Context, *EndPhaseRelationReq) (*EndPhaseRelationResp, error)
	ListPhaseRelation(context.Context, *ListPhaseRelationReq) (*ListPhaseRelationResp, error)
	mustEmbedUnimplementedUserServer()
}

// UnimplementedUserServer must be embedded to have forward compatible implementations.
type UnimplementedUserServer struct {
}

func (UnimplementedUserServer) Login(context.Context, *LoginReq) (*LoginResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Login not implemented")
}
func (UnimplementedUserServer) Register(context.Context, *RegisterReq) (*RegisterResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Register not implemented")
}
func (UnimplementedUserServer) GetUserInfo(context.Context, *GetUserInfoReq) (*GetUserInfoResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUserInfo not implemented")
}
func (UnimplementedUserServer) UpdateUserInfo(context.Context, *UpdateUserInfoReq) (*UpdateUserInfoResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateUserInfo not implemented")
}
func (UnimplementedUserServer) GenerateToken(context.Context, *GenerateTokenReq) (*GenerateTokenResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GenerateToken not implemented")
}
func (UnimplementedUserServer) GetUserPage(context.Context, *GetUserPageReq) (*GetUserPageResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUserPage not implemented")
}
func (UnimplementedUserServer) GetUserCondPage(context.Context, *GetUserCondPageReq) (*GetUserCondPageResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUserCondPage not implemented")
}
func (UnimplementedUserServer) AddInstruct(context.Context, *AddInstructReq) (*AddInstructResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddInstruct not implemented")
}
func (UnimplementedUserServer) UpdateInstruct(context.Context, *UpdateInstructReq) (*UpdateInstructResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateInstruct not implemented")
}
func (UnimplementedUserServer) GetInstructByStuId(context.Context, *GetInstructByStuIdReq) (*GetInstructByStuIdResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetInstructByStuId not implemented")
}
func (UnimplementedUserServer) GetListByTeacherId(context.Context, *GetListByTeacherIdReq) (*GetListByTeacherIdResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetListByTeacherId not implemented")
}
func (UnimplementedUserServer) UpdateTitle(context.Context, *UpdateTitleReq) (*UpdateTitleResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateTitle not implemented")
}
func (UnimplementedUserServer) UpdateState(context.Context, *UpdateStateReq) (*UpdateStateResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateState not implemented")
}
func (UnimplementedUserServer) AddPhase(context.Context, *AddPhaseReq) (*AddPhaseResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddPhase not implemented")
}
func (UnimplementedUserServer) UpdateProcess(context.Context, *UpdateProcessReq) (*UpdateProcessResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateProcess not implemented")
}
func (UnimplementedUserServer) ListTermSort(context.Context, *ListTermSortReq) (*ListTermSortResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListTermSort not implemented")
}
func (UnimplementedUserServer) AddPhaseRelation(context.Context, *AddPhaseRelationReq) (*AddPhaseRelationResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddPhaseRelation not implemented")
}
func (UnimplementedUserServer) EndPhaseRelation(context.Context, *EndPhaseRelationReq) (*EndPhaseRelationResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method EndPhaseRelation not implemented")
}
func (UnimplementedUserServer) ListPhaseRelation(context.Context, *ListPhaseRelationReq) (*ListPhaseRelationResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListPhaseRelation not implemented")
}
func (UnimplementedUserServer) mustEmbedUnimplementedUserServer() {}

// UnsafeUserServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to UserServer will
// result in compilation errors.
type UnsafeUserServer interface {
	mustEmbedUnimplementedUserServer()
}

func RegisterUserServer(s grpc.ServiceRegistrar, srv UserServer) {
	s.RegisterService(&User_ServiceDesc, srv)
}

func _User_Login_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LoginReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServer).Login(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: User_Login_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServer).Login(ctx, req.(*LoginReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _User_Register_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RegisterReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServer).Register(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: User_Register_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServer).Register(ctx, req.(*RegisterReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _User_GetUserInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetUserInfoReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServer).GetUserInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: User_GetUserInfo_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServer).GetUserInfo(ctx, req.(*GetUserInfoReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _User_UpdateUserInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateUserInfoReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServer).UpdateUserInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: User_UpdateUserInfo_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServer).UpdateUserInfo(ctx, req.(*UpdateUserInfoReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _User_GenerateToken_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GenerateTokenReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServer).GenerateToken(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: User_GenerateToken_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServer).GenerateToken(ctx, req.(*GenerateTokenReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _User_GetUserPage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetUserPageReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServer).GetUserPage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: User_GetUserPage_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServer).GetUserPage(ctx, req.(*GetUserPageReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _User_GetUserCondPage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetUserCondPageReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServer).GetUserCondPage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: User_GetUserCondPage_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServer).GetUserCondPage(ctx, req.(*GetUserCondPageReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _User_AddInstruct_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddInstructReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServer).AddInstruct(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: User_AddInstruct_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServer).AddInstruct(ctx, req.(*AddInstructReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _User_UpdateInstruct_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateInstructReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServer).UpdateInstruct(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: User_UpdateInstruct_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServer).UpdateInstruct(ctx, req.(*UpdateInstructReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _User_GetInstructByStuId_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetInstructByStuIdReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServer).GetInstructByStuId(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: User_GetInstructByStuId_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServer).GetInstructByStuId(ctx, req.(*GetInstructByStuIdReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _User_GetListByTeacherId_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetListByTeacherIdReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServer).GetListByTeacherId(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: User_GetListByTeacherId_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServer).GetListByTeacherId(ctx, req.(*GetListByTeacherIdReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _User_UpdateTitle_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateTitleReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServer).UpdateTitle(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: User_UpdateTitle_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServer).UpdateTitle(ctx, req.(*UpdateTitleReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _User_UpdateState_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateStateReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServer).UpdateState(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: User_UpdateState_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServer).UpdateState(ctx, req.(*UpdateStateReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _User_AddPhase_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddPhaseReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServer).AddPhase(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: User_AddPhase_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServer).AddPhase(ctx, req.(*AddPhaseReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _User_UpdateProcess_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateProcessReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServer).UpdateProcess(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: User_UpdateProcess_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServer).UpdateProcess(ctx, req.(*UpdateProcessReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _User_ListTermSort_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListTermSortReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServer).ListTermSort(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: User_ListTermSort_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServer).ListTermSort(ctx, req.(*ListTermSortReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _User_AddPhaseRelation_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddPhaseRelationReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServer).AddPhaseRelation(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: User_AddPhaseRelation_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServer).AddPhaseRelation(ctx, req.(*AddPhaseRelationReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _User_EndPhaseRelation_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EndPhaseRelationReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServer).EndPhaseRelation(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: User_EndPhaseRelation_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServer).EndPhaseRelation(ctx, req.(*EndPhaseRelationReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _User_ListPhaseRelation_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListPhaseRelationReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServer).ListPhaseRelation(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: User_ListPhaseRelation_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServer).ListPhaseRelation(ctx, req.(*ListPhaseRelationReq))
	}
	return interceptor(ctx, in, info, handler)
}

// User_ServiceDesc is the grpc.ServiceDesc for User service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var User_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "user.User",
	HandlerType: (*UserServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "login",
			Handler:    _User_Login_Handler,
		},
		{
			MethodName: "register",
			Handler:    _User_Register_Handler,
		},
		{
			MethodName: "getUserInfo",
			Handler:    _User_GetUserInfo_Handler,
		},
		{
			MethodName: "updateUserInfo",
			Handler:    _User_UpdateUserInfo_Handler,
		},
		{
			MethodName: "generateToken",
			Handler:    _User_GenerateToken_Handler,
		},
		{
			MethodName: "getUserPage",
			Handler:    _User_GetUserPage_Handler,
		},
		{
			MethodName: "getUserCondPage",
			Handler:    _User_GetUserCondPage_Handler,
		},
		{
			MethodName: "addInstruct",
			Handler:    _User_AddInstruct_Handler,
		},
		{
			MethodName: "updateInstruct",
			Handler:    _User_UpdateInstruct_Handler,
		},
		{
			MethodName: "getInstructByStuId",
			Handler:    _User_GetInstructByStuId_Handler,
		},
		{
			MethodName: "getListByTeacherId",
			Handler:    _User_GetListByTeacherId_Handler,
		},
		{
			MethodName: "updateTitle",
			Handler:    _User_UpdateTitle_Handler,
		},
		{
			MethodName: "updateState",
			Handler:    _User_UpdateState_Handler,
		},
		{
			MethodName: "addPhase",
			Handler:    _User_AddPhase_Handler,
		},
		{
			MethodName: "updateProcess",
			Handler:    _User_UpdateProcess_Handler,
		},
		{
			MethodName: "listTermSort",
			Handler:    _User_ListTermSort_Handler,
		},
		{
			MethodName: "addPhaseRelation",
			Handler:    _User_AddPhaseRelation_Handler,
		},
		{
			MethodName: "endPhaseRelation",
			Handler:    _User_EndPhaseRelation_Handler,
		},
		{
			MethodName: "listPhaseRelation",
			Handler:    _User_ListPhaseRelation_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "user/rpc/user.proto",
}
